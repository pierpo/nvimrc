snippet if
	if (${1}) {
		${2:TARGET}
	}

snippet ifl
	if (${1}) return;

snippet func
	function ${1:functionName} (${2:functionArgs}) {
		${3:TARGET}
	}${4}

snippet exp
	module.exports = {
		${1:exports}
	}${2}

snippet funca
	function(${1:args}) {
		${2:body}
	}${3}

snippet cl
	console.log('${1:var}');

snippet clblack
	console.log('%c${1:var}', 'background: black; color: white');

snippet clblue
	console.log('%c${1:var}', 'background: blue; color: white');

snippet clvblue
	console.log('%c${1:var}', 'background: blue; color: white', $1);

snippet clred
	console.log('%c${1:var}', 'background: red; color: white');

snippet clvred
	console.log('%c${1:var}', 'background: red; color: white', $1);

snippet clv
	console.log('${1:var}: ', $1);

snippet clt
	console.table(${1:var});

snippet clo
	console.log('${1:var}: ', $1) || 

snippet fservice
	${1:function}: function (${2:args}) {
		${3:TARGET}
	},${4}

snippet sty
	style={styles.${1}}

snippet component
	// @flow
	import * as React from 'react';
	import { StyleSheet, View } from 'react-native';

	type Props = {};

	const styles = StyleSheet.create({});

	class ${1:ComponentName} extends React.Component<Props> {
		render() {
			return (
				<View>${2:Content}</View>
			);
		}
	}

	export default $1;

snippet fcomponent
	// @flow
	import * as React from 'react';
	import { StyleSheet, View } from 'react-native';

	type Props = {};

	const styles = StyleSheet.create({});

	const ${1:ComponentName} = (props: Props) => (
		<View>${2:Content}</View>
	)

	export default $1;

snippet indexcompo
	// @flow

	export { default } from './${1:Component}';

snippet testsnap
	// @flow
	import * as React from 'react';
	import ShallowRenderer from 'react-test-renderer/shallow';
	import ${1:Component} from './$1';

	describe('<$1/>', () => {
		it('renders correctly', () => {
			const renderer = new ShallowRenderer();
			renderer.render(<$1 ${2:props} />);
			const result = renderer.getRenderOutput();
			expect(result).toMatchSnapshot();
		});
	});

snippet trad
	I18n.t('${1}')

snippet ttrad
	{I18n.t('${1}')}

snippet rcomment
	{/* ${1:TARGET} */}

snippet import
	import { ${2} } from '${1}';

snippet importd
	import ${2} from '${1}';

snippet flow
	// @flow

snippet it
	it('${1}', () => {
		${2:TARGET}
	});

snippet describe
	describe('${1}', () => {
		${2:TARGET}
	});

snippet aftereach
	afterEach(() => {
		${1:TARGET}
	});

snippet beforeeach
	beforeEach(() => {
		${1:TARGET}
	});

snippet strt
	\${${1:TARGET}}

snippet ali
	alignItems: '${1}',

snippet jus
	justifyContent: '${1}',

snippet ct
	center

snippet c
	<${1:Component} ${2:Props}/>

snippet p
	${1:prop}={${2:value}}

snippet att
	${1:attr}="${2:value}"

snippet decprop
	const { ${1} } = this.props;

snippet readonly
	$ReadOnly<${1:TARGET}>

snippet styleguide
	import styleguide from 'style/styleguide';

snippet createstyle
	const styles = StyleSheet.create({
		${1}
	});

snippet screen
	// @flow

	import * as React from "react";
	import Navigator from "@bam.tech/native-navigation";
	import styled, { withTheme } from "styled-components";
	import createReactNavigationScreen from "ntc/src/navigation/createReactNavigationScreen";
	import { withDefaultTheme } from "ntc/src/utils/withCompetitionTheme";
	import Page from "react-native-core-library/components/common/Page";
	import { createNtcNavBar, getHeaderTitle } from "ntc/src/components/NavBar";
	import { HeaderCloseButton } from "react-native-core-library/components/common/MediaHeader";

	const SCREEN_KEY = "${1:Component}";

	type PropsType = $Exact<{}>;

	export default class $1 extends React.PureComponent<PropsType> {
		static navigationOptions = {
			title: getHeaderTitle('${2:Title}'),
			headerLeft: <HeaderCloseButton onClosePress={() => Navigator.pop()} />,
			header: createNtcNavBar()
		};

		render() {
			return (
				<Page transparent hidden modal statusBarTranslucent screenColor="#fff" statusBarColor="rgba(0, 0, 0, 0.4)">
					Toto
				</Page>
			);
		}
	}

	export const register$1 = (reduxStore: *) =>
		Navigator.registerScreen(SCREEN_KEY, () =>
			withDefaultTheme(withTheme(createReactNavigationScreen($1, false)))
		);

	export const open$1 = (props: PropsType) => Navigator.push(SCREEN_KEY, props);

snippet styledtheme
	${({ theme }: ThemePropsType) => theme.${1}}

snippet ifc
	{${1:condition} && ${2:TARGET}}

snippet mapc
	{${1:array}.map(${2:element} => {
		${3}
	})}

snippet flowfixme
	// $FlowFixMe

snippet ntccompo
	// @flow

	import React, { ${2:Component} } from "react";
	import styled from "styled-components";

	type PropsType = $Exact<{}>;

	const Dummy = styled.View\`\`;

	class ${1:Component} extends $2<PropsType> {
		render() {
			return <Dummy />;
		}
	}

	export default $1;

snippet idpcompo
	// @flow

	import React from 'react';

	type Props = {};

	const classes = {};

	export class ${1:Component} extends React.Component<Props> {
		render() {
			return (
				<div>
					${2}
				</div>
			);
		}
	}

snippet readfile
	const ${1:data} = fs.readFileSync(${2:filename}, 'utf8')

snippet writefile
	fs.writeFileSync(${1:filename}, ${2:data})

snippet esl
	// eslint-disable-next-line

snippet exportconstfunction
	export const ${1} = (${2}) => {
		${3}
	}

snippet constfunction
	const ${1} = (${2}) => {
		${3}
	}

snippet req
	const ${2} = require('${1}');

snippet ifnothtml
	if (!(${1:element} instanceof HTMLElement)) return;

snippet fuck
	window.fakjnsdkqwjnasjdo();

snippet then
	then((${1:res}) => {
		${2:body}
	})

snippet success
	chalk.black.bgGreen.bold(' SUCCESS ')

snippet failure
	chalk.black.bgRed.bold(' FAILURE ')

snippet successtick
	chalk.green('✓')

snippet progress
	chalk.yellow('…')

snippet mock
	jest.mock('${1:module}', () => ({
		${2:method}: jest.fn(),
	}));

snippet flowignore
	// $FlowIgnore

snippet pageada
	// @flow

	import React, { Component } from 'react';
	import { SafeAreaView } from 'react-native';
	import type { NavigationScreenProp } from 'react-navigation';
	import styled from 'styled-components/native';
	import { Page } from 'AdaExpress/src/components/Page';
	import I18n from 'AdaExpress/i18n/i18n';
	import { Header } from 'AdaExpress/src/components/Header';

	export class ${1:Page} extends Component<PropsType> {
		goBack = () => {
			this.props.navigation.navigate('${2:previousPage}');
		};

		render() {
			return (
				<Page>
					<StyledScrollView bounces={false}>
						<Header hasBackIcon hasCrossIcon={false} backAction={this.goBack} title={I18n.t('${3:page}.title')} />
						<SafeAreaView />
					</StyledScrollView>
				</Page>
			);
		}
	}

	const StyledScrollView = styled.ScrollView\`
		width: 100%;
		background-color: \${({ theme }) => theme.colors.white};
	\`;

	type OwnProps = {
		navigation: NavigationScreenProp<*>,
	};

	type PropsType = OwnProps;

snippet eslf
	/* eslint-disable ${1} */
