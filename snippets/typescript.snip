snippet if
  if (${1}) {
    ${2:TARGET}
	}

snippet func
  function ${1:functionName} (${2:functionArgs}) {
    ${3:TARGET}
  }${4}

snippet exp
  module.exports = {
    ${1:exports}
  }${2}

snippet funca
  function(${1:args}) {
    ${2:body}
  }${3}

snippet clv
  console.log('${1:var}: ', $1);

snippet fservice
  ${1:function}: function (${2:args}) {
    ${3:TARGET}
  },${4}

snippet sty
options word
	style={styles.${1}}

snippet rncompo
	// @flow
	import * as React from 'react';
	import { View } from 'react-native';

	type Props = {};

	class ${1:ComponentName} extends React.Component<Props> {
		render() {
			return (
				<View>${2:Content}</View>
			);
		}
	}

	export default $1;

snippet indexcompo
	// @flow

	export { default } from './${1:Component}';

snippet testsnap
	// @flow
	import * as React from 'react';
	import ShallowRenderer from 'react-test-renderer/shallow';
	import ${1:Component} from './$1';

	describe('<$1/>', () => {
		it('renders correctly', () => {
			const renderer = new ShallowRenderer();
			renderer.render(<$1 ${2:props} />);
			const result = renderer.getRenderOutput();
			expect(result).toMatchSnapshot();
		});
	});

snippet trad
options word
	I18n.t('${1}')

snippet ttrad
options word
	{I18n.t('${1}')}

snippet rcomment
	{/* ${1:TARGET} */}

snippet import
	import { ${2} } from '${1}';

snippet importd
	import ${2} from '${1}';

snippet flow
	// @flow

snippet it
	it('should ${1}', () => {
		${2:TARGET}
	});

snippet describe
	describe('${1}', () => {
		${2:TARGET}
	});

snippet strt
options word
	\${${1:TARGET}}

snippet ali
options word
	alignItems: '${1}',

snippet jus
options word
	justifyContent: '${1}',

snippet ct
options word
	center

snippet c
	<${1:Component} ${2:Props}/>

snippet p
options word
	${1:prop}={${2:value}}

snippet att
options word
	${1:attr}="${2:value}"

snippet decprop
	const { ${1} } = this.props;

snippet readonly
	$ReadOnly<${1:TARGET}>

snippet styleguide
	import styleguide from 'style/styleguide';

snippet createstyle
	const styles = StyleSheet.create({
		${1}
	});

snippet tsl
	// tslint:disable-next-line

snippet tsignore
alias tsi
	// @ts-ignore

snippet deb
	debugger;

snippet ifl
	if (${0:TARGET}) return;

snippet phaserspriteclass-arcade
	export class ${1:Name} extends Phaser.Physics.Arcade.Sprite {
		public body: Phaser.Physics.Arcade.Body;

		protected scene: ${2:MyScene};

		constructor(scene: $2, x: number, y: number) {
			const sprite = '';
			super(scene, x, y, sprite, 0);
			this.scene = scene;
			this.scene.physics.add.existing(this);
			this.scene.add.existing(this);
		}
	}

snippet phasergeomclass-arcade
	export class ${1:Name} extends Phaser.GameObjects.Rectangle {
		public body: Phaser.Physics.Arcade.Body;

		protected scene: ${2:SceneType};

		constructor(scene: $2, x: number, y: number, w: number, h: number) {
			super(scene, x, y, w, h);
			this.scene = scene;
			this.scene.physics.add.existing(this);
			this.scene.add.existing(this);
		}
	}

snippet phaserscene
	export class ${1:Name} extends Phaser.Scene {
		public static SCENE_KEY = 'Main';

		constructor() {
			super(Main.SCENE_KEY);
		}

		protected create() {
			${2:initialize here}
		}
	}

snippet namesp
	namespace ${1:`expand('%:t:r')`} {
		$2
	}

snippet esl
	// eslint-disable-next-line

snippet for
	for (let ${1:i}; $1 < ${2:stg.length}; $1++) {
		${3:TARGET}
	}

snippet p5mouse
options word
	p.map(p.mouseX, 0, p.width, ${1:min}, ${2:max})

snippet time
	console.time('${1}')
	${2:TARGET}
	console.timeEnd('$1')

snippet consoleseparator
alias csep
	console.log('--------------------------------------------')
